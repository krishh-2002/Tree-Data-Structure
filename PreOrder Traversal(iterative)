// Intuition: In preorder traversal, the tree is traversed in this way: root, left, right. When we visit a node,
//  we print its value, and then we want to visit the left child followed by the right child. 
//  The fundamental problem we face in this scenario is that there is no way that we can move from a child to a
//   parent. To solve this problem, we use an explicit stack data structure. While traversing we can insert 
//   node values to the stack in such a way that we always get the next node value at the top of the stack.


// Approach: 

// The algorithm approach can be stated as:

// We first take an explicit stack data structure and push the root node to it.(if the root node is not NULL).
// Then we use a while loop to iterate over the stack till the stack remains non-empty.
// In every iteration we first pop the stackâ€™s top and print it. 
// Then we first push the right child of this popped node and then push the left child, if they are not NULL. We do so because stack is a last-in-first-out(LIFO) data structure. We need to access the left child first, so we need to push it at the last.
// The execution continues and will stop when the stack becomes empty. In this process, we will get the preorder traversal of the tree.




#include <bits/stdc++.h>
#include<vector>
#include<stack>
using namespace std;
struct node{
    int data;
    struct node *left,*right;
};

vector<int> preordertrav(node *curr){
    vector<int> preOrder;
    if(curr==NULL)
    return preOrder;
    stack<node*> s;
    s.push(curr);
    while(!s.empty()){
        node* topNode = s.top();
        preOrder.push_back(topNode->data);
        s.pop();
        if(topNode->right!=NULL)
        s.push(topNode->right);
        if(topNode->left!=NULL)
        s.push(topNode->left);
    }
    return preOrder;
}
struct node* newnode(int data){
    struct node* node = (struct node *) malloc(sizeof(struct node));
    node ->data = data;
    node ->left = NULL;
    node ->right= NULL;
    return (node);
}
int main()
{
    struct node *root = newnode(1);
    root->left = newnode(2);
    root->right = newnode(3);
    root->left->left = newnode(4);
    root->left->right = newnode(5);
    root->left->right->left = newnode(8);
    root -> right -> left = newnode(6);
    root -> right -> right = newnode(7);
    root -> right -> right -> left = newnode(9);
    root -> right -> right -> right = newnode(10);

    vector<int> preorder;
    preorder = preordertrav(root);
    
    cout<<"The Preorder Traversal is: ";
    for(int i=0;i<preorder.size();i++)
    {
        cout<<preorder[i]<<"->";
    }
    return 0;

}
